<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-glibc" role="wrap">
  <?dbhtml filename="glibc.html"?>

  <sect1info condition="script">
    <productname>glibc</productname>
    <productnumber>&glibc-version;</productnumber>
    <address>&glibc-url;</address>
  </sect1info>

  <title>Glibc-&glibc-version;</title>

  <indexterm zone="ch-system-glibc">
    <primary sortas="a-Glibc">Glibc</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Glibc 包包含主要的 C 库。这个库提供了分配内存, 搜索目录, 打开和关闭文件, 读取和写入文件, 字符串处理, 式样匹配, 计算等诸如此类的基本例行程序(简称例程)。</para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&glibc-ch6-sbu;</seg>
        <seg>&glibc-ch6-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Glibc 的安装</title>

    <note>
      <para>某些 LFS 以外的包建议安装 GNU libiconv，以便数据可以在不同的编码间转换。项目的主页 (<ulink url="http://www.gnu.org/software/libiconv/"/>) 说明
      <quote>这个库为那些没有实现，或者实现无法和 Unicode 之间进行转换的系统上使用这种功能提供了一个 <function>iconv()</function>
      的实现。</quote> Glibc 提供了一个 <function>iconv()</function> 实现并且可以与 Unicode 相互转换，因此在 LFS 系统上不再需要 libiconv。</para>
    </note>

    <para>Glibc 构建系统是自包含的并且可以完美安装，即使编译器的 specs 文件和链接器仍指向 <filename class="directory">/tools</filename>。在 Glibc 安装前，specs 和链接器不能进行调整，因为 Glibc 的 autoconf 测试将会给出错误的结果，从而阻碍了达到干净构建的目标。</para>

    <para>Glibc 文档推荐在源代码目录外一个专用的构建目录中构建 Glibc:</para>

<screen><userinput remap="pre">mkdir -v ../glibc-build
cd ../glibc-build</userinput></screen>

    <para>准备 Glibc 编译:</para>

<screen><userinput remap="configure">../glibc-&glibc-version;/configure  \
    --prefix=/usr          \
    --disable-profile      \
    --enable-kernel=2.6.25 \
    --libexecdir=/usr/lib/glibc</userinput></screen>

    <variablelist>
      <title>新配置选项的含义:</title>

      <varlistentry>
        <term><parameter>--libexecdir=/usr/lib/glibc</parameter></term>
        <listitem>
          <para>这个更改了 <command>pt_chown</command>
          程序的位置，从它的默认位置 <filename
          class="directory">/usr/libexec</filename> 更改为 <filename
          class="directory">/usr/lib/glibc</filename>。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译包:</para>

<screen><userinput remap="make">make</userinput></screen>

    <important>
      <para>在本节中，Glibc 的测试套装是至关重要的。任何情况下都不要跳过。</para>
    </important>

    <para>一般，一些测试不能通过，但是通常您可以忽略下面列出的任意测试失败。
    现在测试构建结果:</para>

<screen><userinput remap="test">make -k check 2&gt;&amp;1 | tee glibc-check-log
grep Error glibc-check-log</userinput></screen>

    <para>您将可能看到一个预期的(被忽略的)失败于 <emphasis>posix/annexc</emphasis> 和
    <emphasis>conform/run-conformtest</emphasis> 测试中。
    另外 Glibc 测试套件稍微依赖于宿主系统。这是最常见问题的一个列表:</para>

    <itemizedlist>

      <listitem>
        <para><emphasis>nptl/tst-clock2</emphasis>,
        <emphasis>nptl/tst-attr3</emphasis>,
        <emphasis>tst/tst-cputimer1</emphasis> 和
        <emphasis>rt/tst-cpuclock2</emphasis>
        测试已知会失败。原因还未完全明白，但是现象表明
        小量计时问题可能触发了这些失败。</para>
      </listitem>

      <listitem>
        <para>数学测试在拥有的 CPU 不是相对较新的真正的 Intel 或真实的 AMD 处理器处理器的系统上运行时有时候会失败。</para>
      </listitem>

      <listitem>
        <para>当运行在较旧和较慢的硬件，或者不堪负载的系统上时，某些测试可能
        由于超过了测试超时而失败。
        修改 make 的 check 命令以设置一个 TIMEOUTFACTOR 被报告有助于
        消除这些错误(如 <command>TIMEOUTFACTOR=16
        make -k check</command>)。</para>
      </listitem>

      <listitem>
        <para>其他测试已知在某些是 are posix/bug-regex32, misc/tst-writev, elf/check-textrel, nptl/tst-getpid2 和 stdio-common/bug22 的架构上会失败。</para>
      </listitem>

    </itemizedlist>

    <para>尽管这是无害的消息，Glibc 的安装过程将会
    抱怨缺少 <filename>/etc/ld.so.conf</filename>。
    通过这样防止这个警告:</para>

<screen><userinput remap="install">touch /etc/ld.so.conf</userinput></screen>

    <para>安装包:</para>

<screen><userinput remap="install">make install</userinput></screen>

    <para>安装 NIS 而 RPC 相关的头文件按默认是不会安装的; 这些是重新构建 glibc 以及被多个 BLFS 包所需的:</para>

<screen><userinput remap="install">cp -v ../glibc-&glibc-version;/sunrpc/rpc/*.h /usr/include/rpc
cp -v ../glibc-&glibc-version;/sunrpc/rpcsvc/*.h /usr/include/rpcsvc
cp -v ../glibc-&glibc-version;/nis/rpcsvc/*.h /usr/include/rpcsvc</userinput></screen>

    <para>通过上述命令，语言环境 (locales) 可以使得系统以未安装的不同语言响应。虽然不需要任何语言环境，但是如果缺少了其中的默认，以后的包的测试套装可能会跳过重要的测试情况。</para>

    <para>独立的 locales 可以使用
    <command>localedef</command> 程序安装。例如，下面的第一个
    <command>localedef</command> 命令组合
    <filename>/usr/share/i18n/locales/cs_CZ</filename>
    字符集无关的 locale 定义和
    <filename>/usr/share/i18n/charmaps/UTF-8.gz</filename>
    字符映射定义，并附加结果到
    <filename>/usr/lib/locale/locale-archive</filename> 文件。
    下列的指令将会安装最优化通过测试所需要的最小的
    locales:</para>

<screen role="nodump"><userinput remap="locale-test">mkdir -pv /usr/lib/locale
localedef -i cs_CZ -f UTF-8 cs_CZ.UTF-8
localedef -i de_DE -f ISO-8859-1 de_DE
localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef -i de_DE -f UTF-8 de_DE.UTF-8
localedef -i en_GB -f UTF-8 en_GB.UTF-8
localedef -i en_HK -f ISO-8859-1 en_HK
localedef -i en_PH -f ISO-8859-1 en_PH
localedef -i en_US -f ISO-8859-1 en_US
localedef -i en_US -f UTF-8 en_US.UTF-8
localedef -i es_MX -f ISO-8859-1 es_MX
localedef -i fa_IR -f UTF-8 fa_IR
localedef -i fr_FR -f ISO-8859-1 fr_FR
localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef -i fr_FR -f UTF-8 fr_FR.UTF-8
localedef -i it_IT -f ISO-8859-1 it_IT
localedef -i it_IT -f UTF-8 it_IT.UTF-8
localedef -i ja_JP -f EUC-JP ja_JP
localedef -i ru_RU -f KOI8-R ru_RU.KOI8-R
localedef -i ru_RU -f UTF-8 ru_RU.UTF-8
localedef -i tr_TR -f UTF-8 tr_TR.UTF-8
localedef -i zh_CN -f GB18030 zh_CN.GB18030</userinput></screen>

    <para>另外，安装您自己国家的语言环境(locale), 语言(language)和字符集(charset)。</para>

    <para>当然也可以使用下列比较费时的命令来一次性安装所有在
    <filename>glibc-&glibc-version;/localedata/SUPPORTED</filename> 文件中列出的语言环境
    (它包含以上列出的每一个语言环境，还有更多其它的):</para>

<screen><userinput remap="locale-full">make localedata/install-locales</userinput></screen>

    <para>然后使用 <command>localedef</command> 命令创建并安装
    未在
    <filename>glibc-&glibc-version;/localedata/SUPPORTED</filename> 文件中列出的语言环境，在某些情况下，您可能需要它们。</para>

  </sect2>

  <sect2 id="conf-glibc" role="configuration">
    <title>配置 Glibc</title>

    <indexterm zone="conf-glibc">
      <primary sortas="e-/etc/nsswitch.conf">/etc/nsswitch.conf</primary>
    </indexterm>

    <indexterm zone="conf-glibc">
      <primary sortas="e-/etc/localtime">/etc/localtime</primary>
    </indexterm>

    <para>需要创建 <filename>/etc/nsswitch.conf</filename> 文件，因为尽管 Glibc 提供了当缺少该文件或该文件损坏的情况下的默认设置，但是 Glibc 的默认值在网络环境中不能好好工作。时区也需要配置。</para>

    <para>通过运行下列命令创建一个新文件 <filename>/etc/nsswitch.conf</filename>:</para>

<screen><userinput>cat &gt; /etc/nsswitch.conf &lt;&lt; "EOF"
<literal># Begin /etc/nsswitch.conf

passwd: files
group: files
shadow: files

hosts: files dns
networks: files

protocols: files
services: files
ethers: files
rpc: files

# End /etc/nsswitch.conf</literal>
EOF</userinput></screen>

    <para>安装时区数据:</para>
<screen><userinput>tar -xf ../tzdata&tzdata-version;.tar.gz

ZONEINFO=/usr/share/zoneinfo
mkdir -pv $ZONEINFO/{posix,right}

for tz in etcetera southamerica northamerica europe africa antarctica  \
          asia australasia backward pacificnew solar87 solar88 solar89 \
          systemv; do
    zic -L /dev/null   -d $ZONEINFO       -y "sh yearistype.sh" ${tz}
    zic -L /dev/null   -d $ZONEINFO/posix -y "sh yearistype.sh" ${tz}
    zic -L leapseconds -d $ZONEINFO/right -y "sh yearistype.sh" ${tz}
done

cp -v zone.tab iso3166.tab $ZONEINFO
zic -d $ZONEINFO -p America/New_York
unset ZONEINFO</userinput></screen>

    <variablelist>
      <title>zic 命令的含义:</title>

      <varlistentry>
        <term><parameter>zic -L /dev/null ...</parameter></term>
        <listitem>
          <para>这个创建 posix 时区，不带任何闰秒。传统来说会把它放在
          <filename class="directory">zoneinfo</filename> 和
          <filename class="directory">zoneinfo/posix</filename> 中。
          务必把 POSIX timezones 置于 <filename class="directory">zoneinfo</filename> 中，
          否则，各种测试套件将会报告错误。在嵌入式系统上，在其中空间紧，而且您甚至不准备更新时区，
          您可以通过不使用 <filename class="directory">posix</filename> 目录来节省 1.9MB，
          但是某些应用程序或测试套件可能会给出稍为不好的结果</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>zic -L leapseconds ...</parameter></term>
        <listitem>
          <para>这个创建正确的时区，包括闰秒。在嵌入系统上，其中的空间紧，
          而且您甚至不准备更新时区，或者考虑时间是否正确，您可以通过省略 <filename class="directory">right</filename> 目录节省 1.9MB。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>zic ... -p ...</parameter></term>
        <listitem>
          <para>这个创建 <filename>posixrules</filename> 文件。我们使用纽约，因为
          POSIX 需要夏令时规则来与美国规则保持一致。</para>
        </listitem>
      </varlistentry>
    </variablelist>


    <para>确定本地时区的一种办法就是运行下列脚本:</para>

<screen role="nodump"><userinput>tzselect</userinput></screen>

    <para>在回答了一些关于位置的问题后，脚本将输出时区的名称(如
    <emphasis>America/Edmonton</emphasis>)。也有一些其它可用的时区在 <filename
    class='directory'>/usr/share/zoneinfo</filename> 中列出，譬如
    <emphasis>Canada/Eastern</emphasis> 或 <emphasis>EST5EDT</emphasis>，它们无法被脚本识别，但是却可以使用。</para>

    <para>Then create the <filename>/etc/localtime</filename> file by
    running:</para>

<screen><userinput>cp -v --remove-destination /usr/share/zoneinfo/<replaceable>&lt;xxx&gt;</replaceable> \
    /etc/localtime</userinput></screen>

    <para>替换 <replaceable>&lt;xxx&gt;</replaceable> 为选择的时区的名称(如 Canada/Eastern).</para>

    <variablelist>
      <title>cp 选项的含义:</title>

      <varlistentry>
        <term><parameter>--remove-destination</parameter></term>
        <listitem>
          <para>这是强制移除已经存在的符号链接。复制文件而不使用符号链接的原因是为了涵盖当 <filename class="directory">/usr</filename>
          在独立分区上的情况。这个在引导进单用户模式时很重要。</para>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

  <sect2 id="conf-ld" role="configuration">
    <title>配置动态加载器</title>

    <indexterm zone="conf-ld">
      <primary sortas="e-/etc/ld.so.conf">/etc/ld.so.conf</primary>
    </indexterm>

    <para>按默认，动态加载器 (<filename
    class="libraryfile">/lib/ld-linux.so.2</filename>) 在它们运行时，会搜索整个
    <filename class="directory">/lib</filename> 和 <filename
    class="directory">/usr/lib</filename> 以查找程序所需的动态库。然而，如果在 <filename class="directory">/lib</filename> 和 <filename class="directory">/usr/lib</filename> 以外的目录中有库文件，这些库文件需要添加到
    <filename>/etc/ld.so.conf</filename> 文件以便动态加载器以查找它们。
    通常已知包含额外库文件的两个目录有 <filename class="directory">/usr/local/lib</filename> 和 <filename class="directory">/opt/lib</filename>，所以添加那些目录到动态加载器的搜索路径。</para>

    <para>通过运行下列命令创建一个新文件 <filename>/etc/ld.so.conf</filename>:</para>

<screen><userinput>cat &gt; /etc/ld.so.conf &lt;&lt; "EOF"
<literal># Begin /etc/ld.so.conf
/usr/local/lib
/opt/lib
</literal>
EOF</userinput></screen>

  <para>如果需要的话，动态加载器也可以搜索目录以及包含在那里找到的文件的内容(目录)。通常在这个包含目录中的文件是指定所需库路径的一行内容。要添加这个功能，运行下列命令:</para>

<screen role="nodump"><userinput>cat &gt;&gt; /etc/ld.so.conf &lt;&lt; "EOF"
<literal># Add an include directory
include /etc/ld.so.conf.d/*.conf
</literal>
EOF
mkdir /etc/ld.so.conf.d</userinput></screen>

  </sect2>

  <sect2 id="contents-glibc" role="content">
    <title>Glibc 的内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>catchsegv, gencat, getconf, getent, iconv, iconvconfig, ldconfig, 
        ldd, lddlibc4, locale, localedef, makedb, mtrace, nscd, pcprofiledump,
        pldd, pt_chown, rpcgen, sln, sotruss, sprof, tzselect, xtrace,
        zdump 和 zic</seg>
        <seg>ld.so, libBrokenLocale.{a,so}, libSegFault.so, libanl.{a,so}, 
        libbsd-compat.a, libc.{a,so}, libc_nonshared.a, libcidn.so, 
        libcrypt.{a,so}, libdl.{a,so}, libg.a, libieee.a, libm.{a,so}, 
        libmcheck.a, libmemusage.so, libnsl.{a,so}, libnss_compat.so, 
        libnss_dns.so, libnss_files.so, libnss_hesiod.so, libnss_nis.so, 
        libnss_nisplus.so, libpcprofile.so, libpthread.{a,so}, 
        libpthread_nonshared.a, libresolv.{a,so}, librpcsvc.a, librt.{a,so}, 
        libthread_db.so 和 libutil.{a,so}</seg>
        <seg>/usr/include/arpa, /usr/include/bits, /usr/include/gnu, 
        /usr/include/net, /usr/include/netash, /usr/include/netatalk, 
        /usr/include/netax25, /usr/include/neteconet, /usr/include/netinet, 
        /usr/include/netipx, /usr/include/netiucv, /usr/include/netpacket, 
        /usr/include/netrom, /usr/include/netrose, /usr/include/nfs, 
        /usr/include/protocols, /usr/include/rpc, /usr/include/rpcsvc, 
        /usr/include/sys, /usr/lib/audit, /usr/lib/gconv, /usr/lib/glibc,
        /usr/lib/locale, /usr/share/i18n, /usr/share/zoneinfo, /var/db</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简述</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="catchsegv">
        <term><command>catchsegv</command></term>
        <listitem>
          <para>可以在程序由于段失败而终止时用于创建一个堆栈踪迹</para>
          <indexterm zone="ch-system-glibc catchsegv">
            <primary sortas="b-catchsegv">catchsegv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gencat">
        <term><command>gencat</command></term>
        <listitem>
          <para>生成消息编目</para>
          <indexterm zone="ch-system-glibc gencat">
            <primary sortas="b-gencat">gencat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getconf">
        <term><command>getconf</command></term>
        <listitem>
          <para>显示针对文件系统的变量的系统配置值</para>
          <indexterm zone="ch-system-glibc getconf">
            <primary sortas="b-getconf">getconf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getent">
        <term><command>getent</command></term>
        <listitem>
          <para>从一个管理性数据库获取条目</para>
          <indexterm zone="ch-system-glibc getent">
            <primary sortas="b-getent">getent</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="iconv">
        <term><command>iconv</command></term>
        <listitem>
          <para>执行字符集转换</para>
          <indexterm zone="ch-system-glibc iconv">
            <primary sortas="b-iconv">iconv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="iconvconfig">
        <term><command>iconvconfig</command></term>
        <listitem>
          <para>创建快速加载 <command>iconv</command> 模块的配置文件</para>
          <indexterm zone="ch-system-glibc iconvconfig">
            <primary sortas="b-iconvconfig">iconvconfig</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ldconfig">
        <term><command>ldconfig</command></term>
        <listitem>
          <para>配置动态链接器运行时绑定</para>
          <indexterm zone="ch-system-glibc ldconfig">
            <primary sortas="b-ldconfig">ldconfig</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ldd">
        <term><command>ldd</command></term>
        <listitem>
          <para>报告每个给出的程序或共享库需要哪个共享库</para>
          <indexterm zone="ch-system-glibc ldd">
            <primary sortas="b-ldd">ldd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lddlibc4">
        <term><command>lddlibc4</command></term>
        <listitem>
          <para>协助 <command>ldd</command> 处理对象文件</para>
          <indexterm zone="ch-system-glibc lddlibc4">
            <primary sortas="b-lddlibc4">lddlibc4</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="locale">
        <term><command>locale</command></term>
        <listitem>
          <para>打印关于当前语言环境的各种信息</para>
          <indexterm zone="ch-system-glibc locale">
            <primary sortas="b-locale">locale</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="localedef">
        <term><command>localedef</command></term>
        <listitem>
          <para>编译语言环境规范</para>
          <indexterm zone="ch-system-glibc localedef">
            <primary sortas="b-localedef">localedef</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="makedb">
        <term><command>makedb</command></term>
        <listitem>
          <para>从文本输入创建一个简单的数据库</para>
          <indexterm zone="ch-system-glibc makedb">
            <primary sortas="b-makedb">makedb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mtrace">
        <term><command>mtrace</command></term>
        <listitem>
          <para>读取并解释一个内存跟踪文件并显示为方便人们阅读格式的摘要</para>
          <indexterm zone="ch-system-glibc mtrace">
            <primary sortas="b-mtrace">mtrace</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nscd">
        <term><command>nscd</command></term>
        <listitem>
          <para>为最常见的名称服务请求提供缓存的后台守护程序</para>
          <indexterm zone="ch-system-glibc nscd">
            <primary sortas="b-nscd">nscd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pcprofiledump">
        <term><command>pcprofiledump</command></term>
        <listitem>
          <para>转储由 PC 剖析生成的信息</para>
          <indexterm zone="ch-system-glibc pcprofiledump">
            <primary sortas="b-pcprofiledump">pcprofiledump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pldd">
        <term><command>pldd</command></term>
        <listitem>
          <para>列出被正在运行的进程所使用的动态共享对象</para>
          <indexterm zone="ch-system-glibc pldd">
            <primary sortas="b-pldd">pldd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pt_chown">
        <term><command>pt_chown</command></term>
        <listitem>
          <para>一个用于 <command>grantpt</command> 设置子伪终端的所有者, 组合访问权限的助手程序</para>
          <indexterm zone="ch-system-glibc pt_chown">
            <primary sortas="b-pt_chown">pt_chown</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rpcgen">
        <term><command>rpcgen</command></term>
        <listitem>
          <para>生成实现 Remote Procedure Call (RPC) 协议的 C 代码</para>
          <indexterm zone="ch-system-glibc rpcgen">
            <primary sortas="b-rpcgen">rpcgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sln">
        <term><command>sln</command></term>
        <listitem>
          <para>一个静态链接的 <command>ln</command> 程序</para>
          <indexterm zone="ch-system-glibc sln">
            <primary sortas="b-sln">sln</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sotruss">
        <term><command>sotruss</command></term>
        <listitem>
          <para>跟踪指定的命令的共享库过程调用</para>
          <indexterm zone="ch-system-glibc sotruss">
            <primary sortas="b-sotruss">sotruss</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sprof">
        <term><command>sprof</command></term>
        <listitem>
          <para>读取并显示共享对象的剖析数据</para>
          <indexterm zone="ch-system-glibc sprof">
            <primary sortas="b-sprof">sprof</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tzselect">
        <term><command>tzselect</command></term>
        <listitem>
          <para>询问用户关于系统的位置并报告相应的时区描述</para>
          <indexterm zone="ch-system-glibc tzselect">
            <primary sortas="b-tzselect">tzselect</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xtrace">
        <term><command>xtrace</command></term>
        <listitem>
          <para>通过打印当前执行的函数来跟踪一个程序的执行</para>
          <indexterm zone="ch-system-glibc xtrace">
            <primary sortas="b-xtrace">xtrace</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zdump">
        <term><command>zdump</command></term>
        <listitem>
          <para>时区转储器</para>
          <indexterm zone="ch-system-glibc zdump">
            <primary sortas="b-zdump">zdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zic">
        <term><command>zic</command></term>
        <listitem>
          <para>时区编译器</para>
          <indexterm zone="ch-system-glibc zic">
            <primary sortas="b-zic">zic</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ld.so">
        <term><filename class="libraryfile">ld.so</filename></term>
        <listitem>
          <para>用于共享库执行的辅助程序</para>
          <indexterm zone="ch-system-glibc ld.so">
            <primary sortas="c-ld.so">ld.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libBrokenLocale">
        <term><filename class="libraryfile">libBrokenLocale</filename></term>
        <listitem>
          <para>被 Glibc 内部用于作为获取运行中的中断的程序
          (例如某些 Motif 应用程序)的一个 gross hack。查看
          <filename>glibc-&glibc-version;/locale/broken_cur_max.c</filename>
          中的注释获得更多信息</para>
          <indexterm zone="ch-system-glibc libBrokenLocale">
            <primary sortas="c-libBrokenLocale">libBrokenLocale</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libSegFault">
        <term><filename class="libraryfile">libSegFault</filename></term>
        <listitem>
          <para>段错误信号处理程序，被 <command>catchsegv</command> 使用</para>
          <indexterm zone="ch-system-glibc libSegFault">
            <primary sortas="c-libSegFault">libSegFault</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libanl">
        <term><filename class="libraryfile">libanl</filename></term>
        <listitem>
          <para>一个异步名称查询库</para>
          <indexterm zone="ch-system-glibc libanl">
            <primary sortas="c-libanl">libanl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libbsd-compat">
        <term><filename class="libraryfile">libbsd-compat</filename></term>
        <listitem>
          <para>提供所需的可移植性，以便在 Linux 运行特定的
          Berkeley Software Distribution (BSD) 程序</para>
          <indexterm zone="ch-system-glibc libbsd-compat">
            <primary sortas="c-libbsd-compat">libbsd-compat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libc">
        <term><filename class="libraryfile">libc</filename></term>
        <listitem>
          <para>主要的 C 库</para>
          <indexterm zone="ch-system-glibc libc">
            <primary sortas="c-libc">libc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcidn">
        <term><filename class="libraryfile">libcidn</filename></term>
        <listitem>
          <para>被 Glibc 内部使用，以在 <function>getaddrinfo()</function> 函数中用于处理国际化域名</para>
          <indexterm zone="ch-system-glibc libcidn">
            <primary sortas="c-libcidn">libcidn</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcrypt">
        <term><filename class="libraryfile">libcrypt</filename></term>
        <listitem>
          <para>密码系统的库</para>
          <indexterm zone="ch-system-glibc libcrypt">
            <primary sortas="c-libcrypt">libcrypt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libdl">
        <term><filename class="libraryfile">libdl</filename></term>
        <listitem>
          <para>动态链接接口库</para>
          <indexterm zone="ch-system-glibc libdl">
            <primary sortas="c-libdl">libdl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libg">
        <term><filename class="libraryfile">libg</filename></term>
        <listitem>
          <para>不包含函数的虚拟库。原先是用于 <command>g++</command> 的一个运行时库</para>
          <indexterm zone="ch-system-glibc libg">
            <primary sortas="c-libg">libg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libieee">
        <term><filename class="libraryfile">libieee</filename></term>
        <listitem>
          <para>在这个模块中的链接强制用于由电气和电子工程师协会(IEEE)定义的数学函数的错误处理规则。默认是 POSIX.1 错误处理</para>
          <indexterm zone="ch-system-glibc libieee">
            <primary sortas="c-libieee">libieee</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libm">
        <term><filename class="libraryfile">libm</filename></term>
        <listitem>
          <para>数学库</para>
          <indexterm zone="ch-system-glibc libm">
            <primary sortas="c-libm">libm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmcheck">
        <term><filename class="libraryfile">libmcheck</filename></term>
        <listitem>
          <para>当被链接到时开启内存分配检查</para>
          <indexterm zone="ch-system-glibc libmcheck">
            <primary sortas="c-libmcheck">libmcheck</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmemusage">
        <term><filename class="libraryfile">libmemusage</filename></term>
        <listitem>
          <para>被 <command>memusage</command> 用来帮助收集关于一个程序的内存使用的信息</para>
          <indexterm zone="ch-system-glibc libmemusage">
            <primary sortas="c-libmemusage">libmemusage</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnsl">
        <term><filename class="libraryfile">libnsl</filename></term>
        <listitem>
          <para>网络服务库</para>
          <indexterm zone="ch-system-glibc libnsl">
            <primary sortas="c-libnsl">libnsl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnss">
        <term><filename class="libraryfile">libnss</filename></term>
        <listitem>
          <para>名称服务切换(Name Service Switch)库，包含用于解析主机名, 用户名, 组名, 别名, 服务, 协议等的函数</para>
          <indexterm zone="ch-system-glibc libnss">
            <primary sortas="c-libnss">libnss</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libpcprofile">
        <term><filename class="libraryfile">libpcprofile</filename></term>
        <listitem>
          <para>包含用于跟踪花费在特定的源代码行的 CPU 时间的分析函数</para>
          <indexterm zone="ch-system-glibc libpcprofile">
            <primary sortas="c-libpcprofile">libpcprofile</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libpthread">
        <term><filename class="libraryfile">libpthread</filename></term>
        <listitem>
          <para>POSIX 线程库</para>
          <indexterm zone="ch-system-glibc libpthread">
            <primary sortas="c-libpthread">libpthread</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libresolv">
        <term><filename class="libraryfile">libresolv</filename></term>
        <listitem>
          <para>包含用于创建, 发送和拦截到互联网域名服务器的数据包的函数</para>
          <indexterm zone="ch-system-glibc libresolv">
            <primary sortas="c-libresolv">libresolv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="librpcsvc">
        <term><filename class="libraryfile">librpcsvc</filename></term>
        <listitem>
          <para>包含提供其它 RPC 服务的函数</para>
          <indexterm zone="ch-system-glibc librpcsvc">
            <primary sortas="c-librpcsvc">librpcsvc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="librt">
        <term><filename class="libraryfile">librt</filename></term>
        <listitem>
          <para>包含提供由 POSIX.1b 实时扩展指定的大部分接口的函数</para>
          <indexterm zone="ch-system-glibc librt">
            <primary sortas="c-librt">librt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libthread_db">
        <term><filename class="libraryfile">libthread_db</filename></term>
        <listitem>
          <para>包含对用于多线程程序的构建调试器有用的函数</para>
          <indexterm zone="ch-system-glibc libthread_db">
            <primary sortas="c-libthread_db">libthread_db</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libutil">
        <term><filename class="libraryfile">libutil</filename></term>
        <listitem>
          <para>包含在多个不同的 Unix 工具中使用的<quote>标准</quote>函数的代码</para>
          <indexterm zone="ch-system-glibc libutil">
            <primary sortas="c-libutil">libutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-gcc-pass1" role="wrap">
  <?dbhtml filename="gcc-pass1.html"?>

  <sect1info condition="script">
    <productname>gcc</productname>
    <productnumber>&gcc-version;</productnumber>
    <address>&gcc-url;</address>
  </sect1info>

  <title>GCC-&gcc-version; - 第 1 次</title>

  <indexterm zone="ch-tools-gcc-pass1">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>工具，第 1 次</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter06/gcc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&gcc-ch5p1-sbu;</seg>
        <seg>&gcc-ch5p1-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>交叉 GCC 的安装</title>

    <para>GCC 现在需要 GMP、MPFR 和 MPC 包。因为这些包可能不包含在您的宿主发行版上，所以它们将会使用 GCC 构建。
    解压每个包到 GCC 源代码目录中并重命名得到的目录，以便 GCC 构建过程可以自动使用它们:</para>

    <note><para>关于本章，经常有误解。过程和较早前所解释的其它章节一样(<xref
    linkend='buildinstr'/>)。首先从源代码目录提取 gcc tarball，
    然后切换到创建的目录中。之后只需按照下面的指令继续。</para></note>

<screen><userinput remap="pre">tar -Jxf ../mpfr-&mpfr-version;.tar.xz
mv -v mpfr-&mpfr-version; mpfr
tar -Jxf ../gmp-&gmp-version;.tar.xz
mv -v gmp-&gmp-version; gmp
tar -zxf ../mpc-&mpc-version;.tar.gz
mv -v mpc-&mpc-version; mpc</userinput></screen>

    <para>下列命令将会更改 GCC 的默认动态链接器的位置为使用安装在 <filename
    class="directory">/tools</filename> 中的那个。
    它还会从 GCC 的包含搜索路径中删除 <filename
    class="directory">/usr/include</filename> 。
    发出:</para>

<screen><userinput remap="pre">for file in \
 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&amp;@g' \
      -e 's@/usr@/tools@g' $file.orig &gt; $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' &gt;&gt; $file
  touch $file.orig
done</userinput></screen>

    <para>在上述的情况中，似乎很难跟得上，让我们打断一下。
    首先，我们查找在 <filename
    class="directory">gcc/config</filename> 目录下所有名为
    <filename>linux.h</filename>, <filename>linux64.h</filename> 或
    <filename>sysv4.h</filename> 的文件。对于每个找到的文件，我们复制它为一个同名但是带上 <quote>.orig</quote> 后缀的文件。
    然后第一个 sed 语句把 <quote>/tools</quote> 前缀到每个
    <quote>/lib/ld</quote>, <quote>/lib64/ld</quote> 或
    <quote>/lib32/ld</quote> 出现的位置，而第二个 sed 语句则替换 <quote>/usr</quote> 的硬编码实例。
    下一步，我们添加我们用于更改默认 startfile 前缀的定义语句到文件的结尾。
    注意，在 <quote>/tools/lib/</quote> 中尾随的 <quote>/</quote> 是必需的。
    最后，我们使用 <command>touch</command> 来更新复制文件的时间标志。
    当结合 <command>cp -u</command> 使用时，这个就可以防止在命令不经意的运行两次时对原始文件的意外更改。</para>

    <para>GCC 不会正确的检测栈保护，它导致了 Glibc-&glibc-version; 构建的问题，所以通过发出下列命令来修复:</para>

<screen><userinput remap="pre">sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure</userinput></screen>

    <para>不要构建 .info 文件。它们在这里不需要，并且会被当前版本的 <command>makeinfo</command> 打断。</para>

<screen><userinput remap="pre">sed -i 's/BUILD_INFO=info/BUILD_INFO=/' gcc/configure</userinput></screen>

    <para>GCC 文档建议在源目录外的一个专用构建目录中构建 GCC:</para>

<screen><userinput remap="pre">mkdir -v ../gcc-build
cd ../gcc-build</userinput></screen>

    <para>准备好 GCC 进行编译:</para>

<screen><userinput remap="configure">../gcc-&gcc-version;/configure         \
    --target=$LFS_TGT          \
    --prefix=/tools            \
    --with-sysroot=$LFS        \
    --with-newlib              \
    --without-headers          \
    --with-local-prefix=/tools \
    --with-native-system-header-dir=/tools/include \
    --disable-nls              \
    --disable-shared           \
    --disable-multilib         \
    --disable-decimal-float    \
    --disable-threads          \
    --disable-libmudflap       \
    --disable-libssp           \
    --disable-libgomp          \
    --disable-libquadmath      \
    --enable-languages=c       \
    --with-mpfr-include=$(pwd)/../gcc-&gcc-version;/mpfr/src \
    --with-mpfr-lib=$(pwd)/mpfr/src/.libs</userinput></screen>

    <variablelist>
      <title>配置选项的含义:</title>

      <varlistentry>
        <term><parameter>--with-newlib</parameter></term>
        <listitem>
          <para>由于能够运作的 C 库文件还未可用，所以这个确保 inhibit_libc 常量在构建 libgcc 时被定义。
          这个防止了任何需要 libc 支持的代码的编译。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--without-headers</parameter></term>
        <listitem>
          <para>当创建一个完整的交叉编译器时，GCC 需要一个和目标系统兼容的标准头文件。
          对于我们的目标来说，这些头文件不是必需的。这个开关防止 GCC 查找它们。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-local-prefix=/tools</parameter></term>
        <listitem>
          <para>本地前缀是 GCC 将会在系统中搜索本地已安装的包含文件的位置。默认是 <filename>/usr/local</filename>。
          设置这个为 <filename>/tools</filename> 有助于保持
          <filename>/usr/local</filename> 的宿主位置在这个 GCC 的搜索路径之外。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-native-system-header-dir=/tools/include</parameter></term>
        <listitem>
          <para>按默认，GCC 搜索 <filename>/usr/include</filename> 查找系统头文件。
          结合 sysroot 开关，这个将会正常的翻译为
          <filename>$LFS/usr/include</filename>。
          尽管如此，在下两个部分中安装的头文件将会转到 <filename>$LFS/tools/include</filename>。
          这个开关参数确保 gcc 将会正确的查找它们。在 GCC 的第二次通过时，这同一个开关参数将确保没有头文件会从宿主系统中找到。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-shared</parameter></term>
        <listitem>
          <para>这个开关强制 GCC 静态链接它的内部库。我们这样做是为了避免宿主系统的问题。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-decimal-float, --disable-threads, --disable-libmudflap, --disable-libssp, --disable-libgomp, --disable-libquadmath</parameter></term>
        <listitem>
          <para>这些开关参数相应的禁用了十进制浮点扩展、线程、libmudflap、libssp 以及 libgomp 及 libquadmath 的支持。这些功能在构建交叉编译器时将无法编译，并且也不是交叉编译临时 libc 任务所需要的。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-multilib</parameter></term>
        <listitem>
          <para>在 x86_64 上，LFS 还不支持多库(multilib)配置。这个开关对 x86 无害。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-languages=c</parameter></term>
        <listitem>
          <para>这个选项确保只有 C 编译器被构建。只是现在需要的唯一语言。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>通过运行一下命令编译 GCC:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>编译现在完成了。这时候，测试套装应该可以运行，但是正如之前提到，测试套装框架还未准备就绪。此时运行测试套装的好处非常小，因为来自第一轮的程序很快将会会被替换。</para>

    <para>安装包:</para>

<screen><userinput remap="install">make install</userinput></screen>

    <para>使用 <parameter>--disable-shared</parameter> 表示
    <filename>libgcc_eh.a</filename> 文件不会被创建和安装。依赖于这个库的 Glibc 包因此在它的构建系统中使用
    <parameter>-lgcc_eh</parameter>。这个依赖关系可以通过构建到 <filename>libgcc.a</filename> 的符号链接得到满足。
    因为文件将会最终包含正常包含在 <filename>libgcc_eh.a</filename> 的对象:</para>

<screen><userinput remap="install">ln -sv libgcc.a `$LFS_TGT-gcc -print-libgcc-file-name | sed 's/libgcc/&amp;_eh/'`</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>这个包的详细信息位于
    <xref linkend="contents-gcc" role="."/></para>

  </sect2>

</sect1>

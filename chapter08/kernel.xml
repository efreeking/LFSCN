<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-bootable-kernel" role="wrap">
  <?dbhtml filename="kernel.html"?>

  <sect1info condition="script">
    <productname>linux</productname>
    <productnumber>&linux-version;</productnumber>
    <address>&linux-url;</address>
  </sect1info>

  <title>Linux-&linux-version;</title>

  <indexterm zone="ch-bootable-kernel">
    <primary sortas="a-Linux">Linux</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Linux 包包含 Linux 内核。</para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&linux-ch8-sbu;</seg>
        <seg>&linux-ch8-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>内核的安装</title>

    <para>构建内核涉及几个步骤&mdash;配置、编译和安装。阅读内核源代码目录树中的 <filename>README</filename> 文件来获得本书配置内核使用的以外的方法。</para>

    <para>运行下列命令准备好编译:</para>

<screen><userinput remap="pre">make mrproper</userinput></screen>

    <para>这个确保内核目录树绝对干净。内核团队推荐这个命令在内核编译前执行。不要依赖解压 TAR 文件后的干净。</para>

    <!-- Support for compiling a keymap into the kernel is deliberately removed -->

    <para>通过一个菜单驱动的界面来配置内核。对于内核配置的全面的信息，查看 <ulink
    url="&hints-root;kernel-configuration.txt"/>、BLFS 有某些 LFS 以外的包的特定内核配置需求相关的信息可以在 <ulink
    url="&blfs-root;view/svn/longindex.html#kernel-config-index"/>。关于配置和构建内核的额外信息，可以在 <ulink url="http://www.kroah.com/lkn/"/> 找到</para>

    <note><para>设置内核配置的一个好地方就是运行 <command>make defconfig</command>。这将会设置基础配置为一个顾及您的当前系统结构的好状态。</para>

    <para>由于在 <application>udev</application> 中最近的更改，确保选择:</para>

    <screen role="nodump">Device Drivers  ---&gt;
  Generic Driver Options  ---&gt;
     Maintain a devtmpfs filesystem to mount at /dev</screen></note>

<screen role="nodump"><userinput>make LANG=<replaceable>&lt;host_LANG_value&gt;</replaceable> LC_ALL= menuconfig</userinput></screen>

    <variablelist>
      <title>make 参数的含义:</title>

      <varlistentry>
        <term><parameter>LANG=&lt;host_LANG_value&gt; LC_ALL=</parameter></term>
        <listitem>
          <para>这个建立在主机上使用的语言环境设置。这是在 UTF-8 Linux 文本控制台上绘制一条正确的 menuconfig ncurses 界面线条所需的。</para>

          <para>确保替换 <replaceable>&lt;host_LANG_value&gt;</replaceable>
          为来自您的主机的 <envar>$LANG</envar> 变量值。
          如果未设置，您可以使用 <envar>$LC_ALL</envar> 或 <envar>$LC_CTYPE</envar> 的值来代替。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>另外，在某些情况下 <command>make oldconfig</command> 可能更适合。查看 <filename>README</filename> 文件获取更多信息。</para>

    <para>如果需要的话，可以通过从宿主系统(假设它可用)复制内核配置文件 <filename>.config</filename> 到解压的 <filename
    class="directory">linux-&linux-version;</filename> 目录来跳过内核配置。但是我们不建议这样做。通常更好的方法是探索所有的配置菜单并从头开始创建内核配置。</para>

    <para>编译内核镜像和模块:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>如果使用内核模块，可能需要 <filename
    class="directory">/etc/modprobe.d</filename> 中的模块配置。
    模块和内核配置的相关信息位于 <xref linkend="ch-scripts-udev"/> 和 <filename
    class="directory">linux-&linux-version;/Documentation</filename> 目录中的内核文档中.
    还有，您可能会对 <filename>modprobe.conf(5)</filename> 感兴趣。</para>

    <para>如果内核配置使用模块，则安装模块:</para>

<screen><userinput remap="install">make modules_install</userinput></screen>

    <para>在内核编译完成后，需要额外的步骤来完成安装。某些文件需要被复制到 <filename class="directory">/boot</filename> 目录。</para>

    <para>内核镜像所在的路径会根据使用的平台而有所不同。下面的文件名可以更改为符合您的品味，但是文件名的词干应该是 <emphasis>vmlinuz</emphasis> 以兼容在下一节中所述的引导过程的自动设置。下列的命令假设是 x86 架构:</para>

<screen><userinput remap="install">cp -v arch/x86/boot/bzImage /boot/vmlinuz-&linux-version;-lfs-&version;</userinput></screen>

    <para><filename>System.map</filename> 是内核的符号文件。它映射内核 API 中每个函数的函数入口点，还有用于运行中的内核的内核数据结构的地址。在调查内核问题时，它是作为一种资源使用。执行下列命令安装 map (映射)文件:</para>

<screen><userinput remap="install">cp -v System.map /boot/System.map-&linux-version;</userinput></screen>

    <para>由以上 <command>make menuconfig</command> 步骤产生的内核配置文件 <filename>.config</filename> 包含了刚编译的内核的所有配置选择。保留这个文件以备将来参考是个不错的想法:</para>

<screen><userinput remap="install">cp -v .config /boot/config-&linux-version;</userinput></screen>

    <para>安装 Linux 内核的文档:</para>

<screen><userinput remap="install">install -d /usr/share/doc/linux-&linux-version;
cp -r Documentation/* /usr/share/doc/linux-&linux-version;</userinput></screen>

    <para>重要的是，要注意在内核源代码目录中的文件不属于 <emphasis>root</emphasis> 的。每当一个包以用户 <emphasis>root</emphasis> 身份解压的时候(就像我们在 chroot 中所作的一样)，文件就会有打包者的计算机上所具有的用户和组 ID。这对于要安装的任何其它包来说不是一个问题，因为源目录树会在安装后删除。然而，Linux 源目录树通常会保持一长段时间。因此有可能打包者使用的用户 ID 和分配给机器上的某些人的一样。那个人就可能会对内核源代码有写入权限。</para>

    <para>如果内核源目录树将要保留，在 <filename
    class="directory">linux-&linux-version;</filename> 目录上运行
    <command>chown -R 0:0</command> 来确保所有的文件都属于用户 <emphasis>root</emphasis>。</para>

    <warning>
      <para>某些内核文档建议从
      <filename class="symlink">/usr/src/linux</filename> 创建一个 指向内核源代码目录的符号链接。这是 2.6 系列之前的内核专用的，并且
      <emphasis>一定不要</emphasis>创建在 LFS 系统上，因为一旦您的基础 LFS 系统上完成，它就会导致您希望构建的包的问题。</para>
    </warning>

    <warning>
      <para>在系统的 <filename class="directory">include</filename> 目录中的头文件应该<emphasis>总是</emphasis>针对 Glibc 编译的头文件，
      也就是，来自这个 Linux 内核源代码包的健全的头文件。因此，它们应该<emphasis>永远</emphasis>不要被原始的内核头文件或任何其它的内核健全头文件所代替。</para>
    </warning>

  </sect2>

  <sect2 id="conf-modprobe" role="configuration">
    <title>配置 Linux 模块加载顺序</title>

    <indexterm zone="conf-modprobe">
      <primary sortas="e-/etc/modprobe.d/usb.conf">/etc/modprobe.d/usb.conf</primary>
    </indexterm>

    <para>需要创建 <filename>/etc/modprobe.d/usb.conf</filename> 文件，以便一旦 USB 驱动程序 (ehci_hcd、ohci_hcd 和 uhci_hcd)被构建为模块，它们将会以正确的顺序加载；ehci_hcd
    需要在 ohci_hcd 和 uhci_hcd 之前加载以避免在引导时输出的警告。</para>

    <para>大部分时间，Linux 模块是自动加载的，但是有时候它需要某些特定的指引。
    加载模块的程序，<command>modprobe</command> 或 <command>insmod</command>，
    就是为这个目的使用 <filename>/etc/modprobe.d/usb.conf</filename>。
    这个文件需要被创建，以便当 USB 驱动程序 (ehci_hcd, ohci_hcd 和
    uhci_hcd) 已经被构建为模块时，它们将可以以正确的顺序加载;
    ehci_hcd 需要在 ohci_hcd 和 uhci_hcd 之前被加载以避免在引导时被输出的警告。</para>

    <para>通过运行下列命令创建一个新文件 <filename>/etc/modprobe.d/usb.conf</filename>:</para>

<screen><userinput>install -v -m755 -d /etc/modprobe.d
cat &gt; /etc/modprobe.d/usb.conf &lt;&lt; "EOF"
<literal># Begin /etc/modprobe.d/usb.conf

install ohci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i ohci_hcd ; true
install uhci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i uhci_hcd ; true

# End /etc/modprobe.d/usb.conf</literal>
EOF</userinput></screen>

  </sect2>

  <sect2 id="contents-kernel" role="content">
    <title>Linux 的内容</title>

    <segmentedlist>
      <segtitle>安装的文件</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>config-&linux-version;, 
        vmlinux-&linux-version;-lfs-&version;; 和
        System.map-&linux-version;</seg>
        <seg>/lib/modules, /usr/share/doc/linux-&linux-version;</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简述</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="config">
        <term><filename>config-&linux-version;</filename></term>
        <listitem>
          <para>包含对内核的所有配置选择</para>
          <indexterm zone="ch-bootable-kernel config">
            <primary sortas="e-/boot/config">/boot/config-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lfskernel">
        <term><filename>vmlinuz-&linux-version;-lfs-&version;</filename></term>
        <listitem>
          <para>Linux 系统的引擎。当打开计算机时，内核是操作系统首先被加载的部分。
          它检测和初始化计算机的硬件的所有组件，然后使得这些组件可以作为文件树以用于软件，并把一个单 CPU 转为具有多任务处理能力的机器，可以同时运行多个程序</para>
          <indexterm zone="ch-bootable-kernel lfskernel">
            <primary sortas="b-lfskernel">lfskernel-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="System.map">
        <term><filename>System.map-&linux-version;</filename></term>
        <listitem>
          <para>一个地址和符号的列表；它映射内核中的所有函数和数据结构的入口点和地址</para>
          <indexterm zone="ch-bootable-kernel System.map">
            <primary sortas="e-/boot/System.map">/boot/System.map-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="pre-hostreqs" xreflabel="Host System Requirements">
  <?dbhtml filename="hostreqs.html"?>

  <title>对宿主系统的要求</title>

    <para>您的宿主系统应该有下列软件的指出的最小版本。这对大多数现在的 Linux 发行版来说不是一个问题。还要注意许多发行版将会把软件的头文件放到单独的包中，通常为
    <quote>&lt;package-name&gt;-devel</quote> 或
    <quote>&lt;package-name&gt;-dev</quote> 的形式。如果您的发行版提供了它们，保证一定要安装。</para>

   <para>列出的软件包的较早的版本可能也可工作，但是未经测试。</para>

  <itemizedlist spacing="compact">

    <listitem>
      <para><emphasis role="strong">Bash-3.2</emphasis> (/bin/sh 应该是到 bash 的一个符号链接或硬链接)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Binutils-2.17</emphasis> (不推荐大于 &binutils-version; 的版本，因为它们未经测试)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bison-2.3</emphasis> (/usr/bin/yacc 应该是到 bison 或者执行 bison 的小脚本的)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bzip2-1.0.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Coreutils-6.9</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Diffutils-2.8.1</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Findutils-4.2.31</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gawk-4.0.1</emphasis> (/usr/bin/awk 应该是到 gawk 的链接)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">GCC-4.1.2</emphasis> 包括 C++ 编译器，<command>g++</command> (不建议使用大于 &gcc-version; 的版本，因为它们还未经测试)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Glibc-2.5.1</emphasis> (不建议超过 &glibc-version; 的版本，因为它们未经测试)</para>

      <note><para>在某些发行版上，有报告称 gcc 所使用的某些库可能会处于一个不稳定的状态，并且这个会干扰到构建某些 LFS 包。
      要检查这个问题，在
      /usr/lib 中或 /usr/lib64 中查找 libgmp.la, libmpfr.la 和 libmpc.la。
      所有这三个要么存在，要么都不存在，而不是只有其中一个或两个。
      如果在您的系统上存在这个问题，要么重命名或删除 .la 文件，或者安装适当的缺少的包。</para></note>

    </listitem>

    <listitem>
      <para><emphasis role="strong">Grep-2.5.1a</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gzip-1.3.12</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Linux Kernel-&min-kernel;</emphasis></para>

      <para>内核版本要求的原因是，我们在第 6 章中构建 <application>glibc</application> 时，在开发者的建议指定的版本。这也是 udev 所要求的。</para>

      <para>如果宿主内核是比 &min-kernel; 版本要早，您将需要替换内核为一个更加新的版本。这个您有两种办法解决。第一，查看您的 Linux 供应商是否提供了 &min-kernel; 或之后版本的内核包。如果有的话，您可以安装它。如果您的供应商没有提供一个可以接受的内核包，或者您不愿意安装它，您可以自己编译一个内核。编译内核和配置引导加载程序(假设宿主使用 GRUB)的说明位于<xref linkend="chapter-bootable"/>。</para>

    </listitem>

    <listitem>
      <para><emphasis role="strong">M4-1.4.10</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Make-3.81</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Patch-2.5.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Perl-5.8.8</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Sed-4.1.5</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Tar-1.18</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Xz-5.0.0</emphasis></para>
    </listitem>

  </itemizedlist>

  <para>注意，以上提及的符号链接是使用本书中所包含的说明构建 LFS 系统所需的。指向其它软件(譬如 dash、mawk 等)的符号链接可以工作，但是未经 LFS 开发团队测试或支持，并且可能需要偏离说明或者需要某些包的额外补丁。</para>

  <!-- 使用一个空的 sect2 元素来避免 pdf 警告。  -->
  <sect2 id="version-check">
  <title> </title>

  <para >要查看您的宿主系统是否拥有所有的合适版本并且能够编译程序，运行下列命令:</para>

<!-- ANY additional lines in the script cause a pdf rendering problem-->
<screen role="nodump"><userinput>cat &gt; version-check.sh &lt;&lt; "EOF"
<literal>#!/bin/bash
# Simple script to list version numbers of critical development tools

export LC_ALL=C
bash --version | head -n1 | cut -d" " -f2-4
echo "/bin/sh -&gt; `readlink -f /bin/sh`"
echo -n "Binutils: "; ld --version | head -n1 | cut -d" " -f3-
bison --version | head -n1
if [ -e /usr/bin/yacc ];
  then echo "/usr/bin/yacc -&gt; `readlink -f /usr/bin/yacc`"; 
  else echo "yacc not found"; fi
bzip2 --version 2&gt;&amp;1 &lt; /dev/null | head -n1 | cut -d" " -f1,6-
echo -n "Coreutils: "; chown --version | head -n1 | cut -d")" -f2
diff --version | head -n1
find --version | head -n1
gawk --version | head -n1
if [ -e /usr/bin/awk ];
  then echo "/usr/bin/awk -&gt; `readlink -f /usr/bin/awk`"; 
  else echo "awk not found"; fi
gcc --version | head -n1
g++ --version | head -n1
ldd --version | head -n1 | cut -d"," -f1
grep --version | head -n1
gzip --version | head -n1
cat /proc/version
m4 --version | head -n1
make --version | head -n1
patch --version | head -n1
echo Perl `perl -V:version`
sed --version | head -n1
tar --version | head -n1
xz --version | head -n1

echo 'main(){}' &gt; dummy.c &amp;&amp; g++ -o dummy dummy.c
if [ -x dummy ]
  then echo "g++ compilation OK";
  else echo "g++ compilation failed"; fi
rm -f dummy.c dummy

for lib in lib{gmp,mpfr,mpc}.la; do
  echo $lib: $(if find /usr/lib* -name $lib|
               grep -q $lib;then :;else echo not;fi) found
done
unset lib</literal>
EOF

bash version-check.sh</userinput></screen>
</sect2>
</sect1>
